Object subclass: #Bibliotheque	instanceVariableNames: 'livres usagers'	classVariableNames: ''	poolDictionaries: ''	category: 'Bibliotheque'!!Bibliotheque commentStamp: 'KV 6/6/2013 19:31' prior: 0!Bibliotheque : heberge le systeme de gestion de bibliotheque!!Bibliotheque methodsFor: 'initialisation' stamp: 'KV 6/6/2013 19:37'!init	"initialise une bibliotheque"	livres := Dictionary new.	usagers := Dictionary new.! !!Bibliotheque methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 19:55'!livres	^livres.! !!Bibliotheque methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 19:55'!usagers	^usagers.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:42'!ajouterLivre	"cree et ajoute un livre a la bibliotheque"	|livre|	livre := Livre new.	livre afficherFiche.	self ajouterLivre: livre.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:40'!ajouterLivre:livre	"ajoute le livre passe en argument a la bibliotheque si le code barre n'est pas deja utilise, renvoie une erreur sinon"	livres at: (livre codeBarre) ifAbsent:[		livres at: (livre codeBarre) put: livre.		Transcript show: 'Le livre a bien ete ajoute.'. Transcript cr.		^nil	].	Transcript show: 'Erreur : le code barre indique est deja utilise.'.	Transcript cr.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:41'!ajouterUsager	"ajoute un usager a la bibliotheque"	|usager|	usager := Usager new.	self ajouterUsager:usager.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:41'!ajouterUsager:usager	"ajoute l'usager passe en argument a la bibliotheque"	usager afficherFiche.	usagers at: (usager mail) put: usager.	Transcript show: 'L''usager a bien ete inscrit.'. Transcript cr.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:43'!emprunter	"permet d'emprunter un livre disponible"	self chercherCodeBarre emprunter.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:43'!rendre	"permet de rendre un livre emprunte"	self chercherCodeBarre rendre.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:44'!supprimerLivre	"supprime un livre a l'aide d'une boite de dialogue"	self supprimerLivre:(FillInTheBlank request: 'Code barre :').! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:44'!supprimerLivre:codeBarre	"supprime un livre a partir de son code barre passe en argument"	livres removeKey: codeBarre		ifAbsent:[Transcript show:'Le livre que vous essayez de supprimer ne figure pas dans la bibliotheque.'. Transcript cr. ^nil].		Transcript show: 'Le livre a bien ete supprime.'. Transcript cr.! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:45'!supprimerUsager	"supprime un usager a l'aide d'une boite de dialogue"	self supprimerUsager:(FillInTheBlank request: 'E-mail :').! !!Bibliotheque methodsFor: 'administration' stamp: 'KV 6/6/2013 19:45'!supprimerUsager:mail	"supprime un usager a partir de son mail passe en argument"	usagers removeKey: mail		ifAbsent:[Transcript show:'Vous essayez de desinscrire un usager non abonne a la bibliotheque.'. Transcript cr. ^nil].		Transcript show: 'L''usager a bien ete desinscrit.'. Transcript cr.! !!Bibliotheque methodsFor: 'recherche' stamp: 'KV 6/6/2013 19:48'!chercherCodeBarre	"recherche un livre par son code barre a l'aide d'une boite de dialogue. Affiche et retourne ce livre s'il existe"	|res|	res := self livres at:(FillInTheBlank request: 'Code barre :') ifAbsent: [Transcript show:'Le livre demande n''existe pas.'. Transcript cr. ^nil].	res afficherFiche.	^res.! !!Bibliotheque methodsFor: 'recherche' stamp: 'KV 6/6/2013 19:47'!chercherMotClef	"affiche la liste des livres contenant un certain mot clef precise par boite de dialogue"	Transcript show: 'Resultat de votre recherche :'. Transcript cr.	self chercherMotClef: (FillInTheBlank request: 'Entrez votre mot clef :').! !!Bibliotheque methodsFor: 'recherche' stamp: 'KV 6/6/2013 19:47'!chercherMotClef:motClef	"affiche la liste des livres contenant un certain mot clef precise en argument"	(self livres values) do: [:l |		(l chercher:motClef) ifTrue: [			l afficherLigne.		]	].! !!Bibliotheque methodsFor: 'recherche' stamp: 'KV 6/6/2013 19:48'!chercherUsager	"recherche un usager par son mail a l'aide d'une boite de dialogue. Affiche et retourne cet usager s'il existe"	|res|	res := self usagers at:(FillInTheBlank request: 'E-mail :') ifAbsent: [Transcript show:'L''usager demande n''existe pas.'. Transcript cr. ^nil].	res afficherFiche.	^res.! !!Bibliotheque methodsFor: 'listes' stamp: 'KV 6/6/2013 19:50'!catalogue	"affiche la liste de l'ensemble des livres possedes par la bibliotheque"	Transcript show: 'Catalogue :'. Transcript cr.	self chercherMotClef: 'disponible'.	self chercherMotClef: 'emprunte'.! !!Bibliotheque methodsFor: 'listes' stamp: 'KV 6/6/2013 19:51'!listeUsagers	"affiche la liste des usagers inscrits a la bibliotheque"	Transcript show: 'Usagers :'. Transcript cr.	(self usagers values) do: [:u |		u afficherLigne.	].! !!Bibliotheque methodsFor: 'listes' stamp: 'KV 6/6/2013 19:51'!livresEmpruntes	"affiche la liste des livres empruntes et de leurs emprunteurs"	Transcript show: 'Liste des livres empruntes :'. Transcript cr.	(self livres values) do: [:l |		(l statut = 'emprunte') ifTrue: [			Transcript show: '- ('. Transcript show: l dateEmprunt. Transcript show: ') '. 			Transcript show: l codeBarre. Transcript show:' ('. Transcript show: l titre. Transcript show: ')'. Transcript show: ' : '.			Transcript show: l emprunteur. Transcript cr.		]	].! !!Bibliotheque methodsFor: 'listes' stamp: 'KV 6/6/2013 20:10'!livresRetard	"affiche la liste des livres empruntes dont la date limite de retour est depassee (on peut emprunter un livre au maximum 15 jours)"	Transcript show: 'Liste des livres dont la date limite de retour est depassee :'. Transcript cr.	(self livres values) do: [:l |		(l statut = 'emprunte') ifTrue: [			((l dateEmprunt addDays:15) < (Date today)) ifTrue: [				Transcript show: '- ('. Transcript show: l dateEmprunt. Transcript show: ') '.				Transcript show: l codeBarre. Transcript show:' ('. Transcript show: l titre. Transcript show: ')'. Transcript show: ' : '.				Transcript show: l emprunteur. Transcript cr.			]		]	].!]style[(96 1 48 171 41 285)f2b,f2,f2b,f2,f1,f2! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bibliotheque class	instanceVariableNames: ''!!Bibliotheque class methodsFor: 'as yet unclassified' stamp: 'KV 5/30/2013 11:44'!new	^super new init! !Object subclass: #Livre	instanceVariableNames: 'codeBarre titre auteur editeur genre statut'	classVariableNames: ''	poolDictionaries: ''	category: 'Bibliotheque'!!Livre commentStamp: 'KV 6/6/2013 19:33' prior: 0!Livre : represente une entite de livre de la bibliotheque!!Livre methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 10:46'!auteur	^auteur! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/27/2013 18:01'!auteur:x	auteur:=x.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 16:48'!codeBarre	^codeBarre! !!Livre methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 16:48'!codeBarre:x	codeBarre:=x.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 6/2/2013 15:39'!dateEmprunt	^statut dateEmprunt.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 10:46'!editeur	^editeur! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/27/2013 18:04'!editeur:x	editeur:=x.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 19:56'!emprunteur	"retourne l'emprunteur si le livre est emprunte"	^statut emprunteur.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 17:20'!genre	^genre! !!Livre methodsFor: 'accesseurs' stamp: 'KV 6/6/2013 17:20'!genre:x	genre:=x.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 11:10'!statut	^statut statut! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 11:36'!statut:x	statut:=x.! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 10:45'!titre	^titre! !!Livre methodsFor: 'accesseurs' stamp: 'KV 5/27/2013 18:07'!titre:x	titre:=x.! !!Livre methodsFor: 'initialisation' stamp: 'KV 6/6/2013 19:56'!init	"initialise un livre a l'aide d'une boite de dialogue"	self codeBarre: (FillInTheBlank request: 'Code Barre :').	self titre: (FillInTheBlank request: 'Titre :').	self auteur: (FillInTheBlank request: 'Auteur :').	self editeur: (FillInTheBlank request: 'Editeur :').	self genre: (FillInTheBlank request: 'Genre :').	self statut: StatutDisponible new.! !!Livre methodsFor: 'administration' stamp: 'KV 6/6/2013 19:57'!chercher:info	"renvoie un booleen selon que le mot clef passe en argument est present dans le livre ou non"	|infos|	infos := Bag new.	infos add: self codeBarre; add: self titre; add: self auteur; add: self editeur; add: self genre; add:self statut.	^((infos occurrencesOf: info) > 0).! !!Livre methodsFor: 'administration' stamp: 'KV 6/6/2013 19:57'!emprunter	"permet d'emprunter un livre"	self statut: statut emprunter.! !!Livre methodsFor: 'administration' stamp: 'KV 6/6/2013 19:58'!rendre	"permet de rendre un livre"	self statut: statut rendre.! !!Livre methodsFor: 'test' stamp: 'KV 6/6/2013 19:59'!retarder	"fonction de test qui permet de faire en sorte que la date de retour du livre soit depassee"	statut retarder.! !!Livre methodsFor: 'affichage' stamp: 'KV 6/6/2013 19:54'!afficherFiche	"affiche un livre en mode fiche"	Transcript show: '--------------------'. Transcript cr.	Transcript show: 'Code Barre : '. Transcript show: (self codeBarre). Transcript cr.	Transcript show: 'Titre : '. Transcript show: (self titre). Transcript cr.	Transcript show: 'Auteur : '. Transcript show: (self auteur). Transcript cr.	Transcript show: 'Editeur : '. Transcript show: (self editeur). Transcript cr.	Transcript show: 'Genre : '. Transcript show: (self genre). Transcript cr.	Transcript show: 'Statut : '. Transcript show: (self statut). Transcript cr.	Transcript show: '--------------------'. Transcript cr.! !!Livre methodsFor: 'affichage' stamp: 'KV 6/6/2013 19:54'!afficherLigne	"affiche un livre en mode ligne"	Transcript show: '> '.	Transcript show: (self codeBarre).	Transcript show: ' -- '. Transcript show: (self titre).	Transcript show: ' -- '. Transcript show: (self auteur).	Transcript show: ' -- '. Transcript show: (self editeur).	Transcript show: ' -- '. Transcript show: (self genre).	Transcript show: ' -- '. Transcript show: (self statut).	Transcript cr.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Livre class	instanceVariableNames: ''!!Livre class methodsFor: 'as yet unclassified' stamp: 'KV 5/30/2013 11:04'!new	^super new init.! !Object subclass: #Statut	instanceVariableNames: 'statut'	classVariableNames: ''	poolDictionaries: ''	category: 'Bibliotheque'!!Statut commentStamp: 'KV 6/6/2013 19:32' prior: 0!Statut : classe abstraite representant le statut d'un livre!!Statut methodsFor: 'administration' stamp: 'KV 6/2/2013 17:04'!dateEmprunt	self subclassResponsibility.! !!Statut methodsFor: 'administration' stamp: 'KV 6/2/2013 17:04'!emprunter	self subclassResponsibility.! !!Statut methodsFor: 'administration' stamp: 'KV 6/2/2013 17:04'!emprunteur	self subclassResponsibility.! !!Statut methodsFor: 'administration' stamp: 'KV 6/2/2013 17:04'!rendre	self subclassResponsibility.! !!Statut methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 11:09'!statut	^statut! !!Statut methodsFor: 'accesseurs' stamp: 'KV 5/30/2013 11:11'!statut:x	statut:=x.! !!Statut methodsFor: 'test' stamp: 'KV 6/6/2013 19:08'!retarder	self subclassResponsibility.! !Statut subclass: #StatutDisponible	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Bibliotheque'!!StatutDisponible commentStamp: 'KV 6/6/2013 19:33' prior: 0!StatutDisponible : sous classe de Statut, heberge les actions pouvant etre faites sur un livre disponible!!StatutDisponible methodsFor: 'administration' stamp: 'KV 6/6/2013 20:01'!dateEmprunt	"un livre disponible n'a pas de date d'emprunt"	^nil.! !!StatutDisponible methodsFor: 'administration' stamp: 'KV 6/6/2013 20:02'!emprunter	"emprunte effectivement un livre en demandant le mail de l'emprunteur a l'aide d'une boite de dialogue"	|nouveauStatut|	nouveauStatut:=StatutEmprunte new.	nouveauStatut emprunteur: (FillInTheBlank request: 'E-mail de l''abonne :').	Transcript show: 'Le livre a bien ete emprunte.'. Transcript cr.	^nouveauStatut.! !!StatutDisponible methodsFor: 'administration' stamp: 'KV 6/6/2013 20:02'!emprunteur	"un livre disponible n'a pas d'emprunteur"	^nil.! !!StatutDisponible methodsFor: 'administration' stamp: 'KV 6/6/2013 20:07'!rendre	"un livre disponible ne peut pas etre rendu. Renvoie self car le statut est actualise dans tous les cas"	Transcript show:'Je suis deja disponible.'.	Transcript cr.	^self! !!StatutDisponible methodsFor: 'initialisation' stamp: 'KV 6/6/2013 20:03'!init	self statut:'disponible'! !!StatutDisponible methodsFor: 'test' stamp: 'KV 6/6/2013 20:04'!retarder	"un livre disponible ne peut pas etre retarde, meme pour un test"	Transcript show: 'Erreur : le livre est disponible, il faut l''emprunter avant de le retarder.'.	Transcript cr.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StatutDisponible class	instanceVariableNames: ''!!StatutDisponible class methodsFor: 'as yet unclassified' stamp: 'KV 5/30/2013 11:31'!new	^super new init.! !Statut subclass: #StatutEmprunte	instanceVariableNames: 'emprunteur dateEmprunt'	classVariableNames: ''	poolDictionaries: ''	category: 'Bibliotheque'!!StatutEmprunte commentStamp: 'KV 6/6/2013 19:33' prior: 0!StatutEmprunte : sous classe de Statut, heberge les actions pouvant etre faites sur un livre emprunte!!StatutEmprunte methodsFor: 'administration' stamp: 'KV 6/6/2013 20:08'!emprunter	"un livre deja emprunte ne peut pas etre emprunte. Renvoie self car le statut est actualise dans tous les cas"	Transcript show:'Je suis deja emprunte.'.	Transcript cr.	^self! !!StatutEmprunte methodsFor: 'administration' stamp: 'KV 6/6/2013 20:08'!rendre	"rend effectivement un livre"	Transcript show: 'Le livre a bien ete rendu.'. Transcript cr.	^StatutDisponible new.! !!StatutEmprunte methodsFor: 'initialisation' stamp: 'KV 6/2/2013 15:24'!init	self statut:'emprunte'.	self dateEmprunt: Date today.! !!StatutEmprunte methodsFor: 'test' stamp: 'KV 6/6/2013 20:09'!retarder	"retarde effectivement un livre en reculant sa date d'emprunt de 42 jours"	dateEmprunt := dateEmprunt addDays:-42.	Transcript show: 'Le livre a ete retarde.'.	Transcript cr.! !!StatutEmprunte methodsFor: 'accesseurs' stamp: 'KV 6/2/2013 14:57'!dateEmprunt	^dateEmprunt.! !!StatutEmprunte methodsFor: 'accesseurs' stamp: 'KV 6/2/2013 14:57'!dateEmprunt:x	dateEmprunt:=x.! !!StatutEmprunte methodsFor: 'accesseurs' stamp: 'KV 6/1/2013 16:30'!emprunteur	^emprunteur! !!StatutEmprunte methodsFor: 'accesseurs' stamp: 'KV 6/1/2013 16:30'!emprunteur:x	emprunteur:=x.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StatutEmprunte class	instanceVariableNames: ''!!StatutEmprunte class methodsFor: 'as yet unclassified' stamp: 'KV 6/2/2013 12:29'!new	^super new init.! !Object subclass: #Usager	instanceVariableNames: 'nom prenom adresse mail'	classVariableNames: ''	poolDictionaries: ''	category: 'Bibliotheque'!!Usager commentStamp: 'KV 6/6/2013 19:33' prior: 0!Usager : represente une entite d'usager de la bibliotheque!!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:09'!adresse	^adresse.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:09'!adresse:x	adresse:=x.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:12'!mail	^mail.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:12'!mail:x	mail:=x.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:08'!nom	^nom.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:09'!nom:x	nom:=x.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:09'!prenom	^prenom.! !!Usager methodsFor: 'accesseurs' stamp: 'KV 5/31/2013 11:09'!prenom:x	prenom:=x.! !!Usager methodsFor: 'affichage' stamp: 'KV 6/6/2013 20:09'!afficherFiche	"affiche un usager en mode fiche"	Transcript show: '--------------------'. Transcript cr.	Transcript show: 'Prenom : '. Transcript show: (self prenom). Transcript cr.	Transcript show: 'Nom : '. Transcript show: (self nom). Transcript cr.	Transcript show: 'Adresse : '. Transcript show: (self adresse). Transcript cr.	Transcript show: 'E-mail : '. Transcript show: (self mail). Transcript cr.	Transcript show: '--------------------'. Transcript cr.! !!Usager methodsFor: 'affichage' stamp: 'KV 6/6/2013 20:10'!afficherLigne	"affiche un usager en mode ligne"	Transcript show: '> '.	Transcript show: (self prenom).	Transcript show: ' '.	Transcript show: (self nom).	Transcript show: ' -- '. Transcript show: (self adresse).	Transcript show: ' -- '. Transcript show: (self mail).	Transcript cr.! !!Usager methodsFor: 'initialisation' stamp: 'KV 6/6/2013 20:10'!init	"initialise un usager a l'aide d'une boite de dialogue"	self nom: (FillInTheBlank request: 'Nom :').	self prenom: (FillInTheBlank request: 'Prenom :').	self adresse: (FillInTheBlank request: 'Adresse :').	self mail: (FillInTheBlank request: 'E-mail :').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usager class	instanceVariableNames: ''!!Usager class methodsFor: 'as yet unclassified' stamp: 'KV 5/31/2013 11:14'!new	^super new init.! !